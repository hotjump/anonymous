#include <string>

uint64_t HashFunc(uint8_t* buf, uint16_t siz)
{
    const uint64_t mul = 0xc6a4a7935bd1e995ULL;
    const int32_t rtt = 47;
    uint64_t hashcode = 19780211ULL ^ (siz * mul);

    uint8_t* rp = buf;
    while (siz >= sizeof(uint64_t)) {
        uint64_t num = ((uint64_t)rp[0] << 0) | ((uint64_t)rp[1] << 8) | ((uint64_t)rp[2] << 16) | ((uint64_t)rp[3] << 24) | ((uint64_t)rp[4] << 32) | ((uint64_t)rp[5] << 40) | ((uint64_t)rp[6] << 48) | ((uint64_t)rp[7] << 56);

        num *= mul;
        num ^= num >> rtt;
        num *= mul;
        hashcode *= mul;
        hashcode ^= num;

        rp += sizeof(uint64_t);
        siz -= sizeof(uint64_t);
    }

    switch (siz) {
    case 7:
        hashcode ^= (uint64_t)rp[6] << 48;
    case 6:
        hashcode ^= (uint64_t)rp[5] << 40;
    case 5:
        hashcode ^= (uint64_t)rp[4] << 32;
    case 4:
        hashcode ^= (uint64_t)rp[3] << 24;
    case 3:
        hashcode ^= (uint64_t)rp[2] << 16;
    case 2:
        hashcode ^= (uint64_t)rp[1] << 8;
    case 1:
        hashcode ^= (uint64_t)rp[0];
        hashcode *= mul;
    };

    hashcode ^= hashcode >> rtt;
    hashcode *= mul;
    hashcode ^= hashcode >> rtt;

    return hashcode;
}

uint64_t NearPrime(uint64_t num)
{
    static uint64_t primes[] = {
        1, 2, 3, 5, 7, 11,
        13, 17, 19, 23, 29, 31,
        37, 43, 47, 53, 59, 61,
        71, 79, 83, 89, 103, 109,
        113, 127, 139, 157, 173, 191,
        199, 223, 239, 251, 283, 317,
        349, 383, 409, 443, 479, 509,
        571, 631, 701, 761, 829, 887,
        953, 1021, 1151, 1279, 1399, 1531,
        1663, 1789, 1913, 2039, 2297, 2557,
        2803, 3067, 3323, 3583, 3833, 4093,
        4603, 5119, 5623, 6143, 6653, 7159,
        7673, 8191, 9209, 10223, 11261, 12281,
        13309, 14327, 15359, 16381, 18427, 20479,
        22511, 24571, 26597, 28669, 30713, 32749,
        36857, 40949, 45053, 49139, 53239, 57331,
        61417, 65521, 73727, 81919, 90107, 98299,
        106487, 114679, 122869, 131071, 147451, 163819,
        180221, 196597, 212987, 229373, 245759, 262139,
        294911, 327673, 360439, 393209, 425977, 458747,
        491503, 524287, 589811, 655357, 720887, 786431,
        851957, 917503, 982981, 1048573, 1179641, 1310719,
        1441771, 1572853, 1703903, 1835003, 1966079, 2097143,
        2359267, 2621431, 2883577, 3145721, 3407857, 3670013,
        3932153, 4194301, 4718579, 5242877, 5767129, 6291449,
        6815741, 7340009, 7864301, 8388593, 9437179, 10485751,
        11534329, 12582893, 13631477, 14680063, 15728611, 16777213,
        18874367, 20971507, 23068667, 25165813, 27262931, 29360087,
        31457269, 33554393, 37748717, 41943023, 46137319, 50331599,
        54525917, 58720253, 62914549, 67108859, 75497467, 83886053,
        92274671, 100663291, 109051903, 117440509, 125829103, 134217689,
        150994939, 167772107, 184549373, 201326557, 218103799, 234881011,
        251658227, 268435399, 301989881, 335544301, 369098707, 402653171,
        436207613, 469762043, 503316469, 536870909, 603979769, 671088637,
        738197503, 805306357, 872415211, 939524087, 1006632947, 1073741789,
        1207959503, 1342177237, 1476394991, 1610612711, 1744830457, 1879048183,
        2013265907, 0
    };

    int i = 0;
    for (i = 0; primes[i] > 0; ++i) {
        if (num <= primes[i]) {
            return primes[i];
        }
    }

    return primes[i - 1];
}